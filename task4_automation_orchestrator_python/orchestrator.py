import os
import requests
import json
from dotenv import load_dotenv

# Load API keys from .env file
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
SHOPIFY_ACCESS_TOKEN = os.getenv("SHOPIFY_ACCESS_TOKEN")
SHOPIFY_STORE_DOMAIN = os.getenv("SHOPIFY_STORE_DOMAIN")  # e.g., naser-test-store.myshopify.com

def generate_product():
    url = "https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent"
    headers = { "Content-Type": "application/json" }

    payload = {
        "contents": [
            {
                "parts": [
                    {
                        "text": (
                            "Generate one fun T-shirt product with name, price, color. "
                            "Respond in JSON only like this format: "
                            "{\"name\": \"Cool Tee\", \"price\": 199, \"color\": \"Black\"}"
                        )
                    }
                ]
            }
        ]
    }

    params = {"key": GEMINI_API_KEY}

    response = requests.post(url, headers=headers, json=payload, params=params)

    if response.status_code == 200:
        try:
            text = response.json()['candidates'][0]['content']['parts'][0]['text']
            print("✅ Product Generated by Gemini:\n", text)
            return json.loads(text)
        except Exception as e:
            print("❌ Failed to parse Gemini response:", e)
            print("Raw response:", response.json())
            return None
    else:
        print("❌ Gemini API Error:", response.status_code, response.text)
        return None

def create_shopify_product(product):
    url = f"https://{SHOPIFY_STORE_DOMAIN}/admin/api/2024-04/products.json"

    headers = {
        "Content-Type": "application/json",
        "X-Shopify-Access-Token": SHOPIFY_ACCESS_TOKEN
    }

    payload = {
        "product": {
            "title": product['name'],
            "body_html": f"A stylish {product['color']} T-shirt",
            "variants": [
                {
                    "price": str(product['price']),
                    "option1": product['color']
                }
            ],
            "options": [
                {
                    "name": "Color",
                    "values": [product['color']]
                }
            ]
        }
    }

    response = requests.post(url, headers=headers, json=payload)

    if response.status_code == 201:
        print("✅ Product created on Shopify!\nResponse:")
        print(response.json())
    else:
        print("❌ Shopify API Error:", response.status_code, response.text)

if __name__ == "__main__":
    product = generate_product()
    if product:
        create_shopify_product(product)
